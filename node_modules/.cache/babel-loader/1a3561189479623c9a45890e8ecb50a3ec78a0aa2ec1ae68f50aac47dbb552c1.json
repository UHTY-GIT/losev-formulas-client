{"ast":null,"code":"// services/apiService.js\nimport axios from 'axios';\nconst BASE_URL = 'http://dev-api.losev-formulas.com';\nconst apiService = {\n  // Функція для входу користувача\n  loginUser: (email, password) => {\n    return axios.post(`${BASE_URL}/api/v1/users/sign_in`, {\n      email: email,\n      password: password\n    });\n  },\n  // Функція для реєстрації користувача\n  registerUser: (email, password, name) => {\n    return axios.post(`${BASE_URL}/api/v1/users/sign_up`, {\n      email: email,\n      password: password,\n      name: name\n    });\n  },\n  // Функція для всіх подкастів користувача\n  AllPodcastPage: () => {\n    return axios.get(`${BASE_URL}/api/v1/podcasts`);\n  },\n  // Функція для ТОПу подкастів всіх користувачів\n  TopPodcastPage: () => {\n    return axios.get(`${BASE_URL}/api/v1/podcasts/top`);\n  },\n  // Функція для Рекомендацій подкастів всіх користувачів\n  RecomendationPodcastPage: () => {\n    return axios.get(`${BASE_URL}/api/v1/podcasts/recommendation`);\n  },\n  // Функція для пошуку подкастів за назвою або автором\n  searchPodcasts: query => {\n    return axios.get(`${BASE_URL}/api/v1/podcasts?search=${query}`);\n  },\n  // Функція для всіх категорій і їх типу\n  allCategories: () => {\n    return axios.get(`${BASE_URL}/api/v1/categories`);\n  },\n  //Функція для завантаження  даних профілю\n  async getUserProfile(token) {\n    const config = {\n      headers: {\n        'authtoken': token\n      }\n    };\n    try {\n      const response = await axios.get(`${BASE_URL}/api/v1/users/profile`, config);\n      return response.data;\n    } catch (error) {\n      console.error('Під час отримання даних сталася помилка: ', error);\n    }\n  },\n  // Функція для виходу користувача\n  logoutUser: token => {\n    const config = {\n      headers: {\n        'authtoken': token\n      }\n    };\n    return axios.post(`${BASE_URL}/api/v1/users/logout`, config).then(response => {\n      return response.data;\n    }).catch(error => {\n      console.error('Під час виходу сталася помилка: ', error);\n    });\n  },\n  // Функція для отримання улюблених подкастів\n  getFavoritePodcasts: token => {\n    const config = {\n      headers: {\n        'authtoken': token\n      }\n    };\n    return axios.get(`${BASE_URL}/api/v1/podcasts/favorite`, config).then(response => {\n      return response.data;\n    }).catch(error => {\n      console.error('Під час отримання улюблених подкастів сталася помилка: ', error);\n    });\n  },\n  // Функція для додавання подкасту до улюблених\n  addToFavorite: (token, podcastId) => {\n    const config = {\n      headers: {\n        'authtoken': token\n      }\n    };\n    return axios.post(`${BASE_URL}/api/v1/podcasts/add_to_favorite`, {\n      podcast_id: podcastId\n    }, config).then(response => {\n      return response.data;\n    }).catch(error => {\n      console.error('Під час додавання до улюблених сталася помилка: ', error);\n    });\n  },\n  // Функція для зміни паролю користувача\n  changeUserPassword: (token, oldPassword, newPassword) => {\n    const config = {\n      headers: {\n        'authtoken': token\n      }\n    };\n    const data = {\n      old_password: oldPassword,\n      new_password: newPassword\n    };\n    return axios.post(`${BASE_URL}/api/v1/users/change_password`, data, config).then(response => {\n      return response.data;\n    }).catch(error => {\n      console.error('Під час зміни паролю сталася помилка: ', error);\n    });\n  }\n\n  // Тут можна додати інші функції для різних API запитів\n};\n\nexport default apiService;","map":{"version":3,"names":["axios","BASE_URL","apiService","loginUser","email","password","post","registerUser","name","AllPodcastPage","get","TopPodcastPage","RecomendationPodcastPage","searchPodcasts","query","allCategories","getUserProfile","token","config","headers","response","data","error","console","logoutUser","then","catch","getFavoritePodcasts","addToFavorite","podcastId","podcast_id","changeUserPassword","oldPassword","newPassword","old_password","new_password"],"sources":["C:/Users/Denys/WebstormProjects/losev-formulas-client/src/services/apiService.js"],"sourcesContent":["// services/apiService.js\r\nimport axios from 'axios';\r\n\r\nconst BASE_URL = 'http://dev-api.losev-formulas.com';\r\n\r\nconst apiService = {\r\n    // Функція для входу користувача\r\n    loginUser: (email, password) => {\r\n        return axios.post(`${BASE_URL}/api/v1/users/sign_in`, {\r\n            email: email,\r\n            password: password\r\n        });\r\n    },\r\n\r\n    // Функція для реєстрації користувача\r\n    registerUser: (email, password, name) => {\r\n        return axios.post(`${BASE_URL}/api/v1/users/sign_up`, {\r\n            email: email,\r\n            password: password,\r\n            name: name\r\n        });\r\n    },\r\n\r\n    // Функція для всіх подкастів користувача\r\n    AllPodcastPage: () => {\r\n        return axios.get(`${BASE_URL}/api/v1/podcasts`);\r\n    },\r\n\r\n    // Функція для ТОПу подкастів всіх користувачів\r\n    TopPodcastPage: () => {\r\n        return axios.get(`${BASE_URL}/api/v1/podcasts/top`);\r\n    },\r\n\r\n    // Функція для Рекомендацій подкастів всіх користувачів\r\n    RecomendationPodcastPage: () => {\r\n        return axios.get(`${BASE_URL}/api/v1/podcasts/recommendation`);\r\n    },\r\n\r\n    // Функція для пошуку подкастів за назвою або автором\r\n    searchPodcasts: (query) => {\r\n        return axios.get(`${BASE_URL}/api/v1/podcasts?search=${query}`);\r\n    },\r\n\r\n    // Функція для всіх категорій і їх типу\r\n    allCategories: () => {\r\n        return axios.get(`${BASE_URL}/api/v1/categories`);\r\n    },\r\n\r\n    //Функція для завантаження  даних профілю\r\n    async getUserProfile(token) {\r\n        const config = {\r\n            headers: { 'authtoken': token },\r\n        };\r\n        try {\r\n            const response = await axios.get(`${BASE_URL}/api/v1/users/profile`, config);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Під час отримання даних сталася помилка: ', error);\r\n        }\r\n    },\r\n\r\n    // Функція для виходу користувача\r\n    logoutUser: (token) => {\r\n        const config = {\r\n            headers: { 'authtoken': token },\r\n        };\r\n        return axios.post(`${BASE_URL}/api/v1/users/logout`, config)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => {\r\n                console.error('Під час виходу сталася помилка: ', error);\r\n            });\r\n    },\r\n\r\n    // Функція для отримання улюблених подкастів\r\n    getFavoritePodcasts: (token) => {\r\n        const config = {\r\n            headers: { 'authtoken': token },\r\n        };\r\n        return axios.get(`${BASE_URL}/api/v1/podcasts/favorite`, config)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => {\r\n                console.error('Під час отримання улюблених подкастів сталася помилка: ', error);\r\n            });\r\n    },\r\n\r\n    // Функція для додавання подкасту до улюблених\r\n    addToFavorite: (token, podcastId) => {\r\n        const config = {\r\n            headers: { 'authtoken': token },\r\n        };\r\n        return axios.post(`${BASE_URL}/api/v1/podcasts/add_to_favorite`,{ podcast_id: podcastId }, config)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => {\r\n                console.error('Під час додавання до улюблених сталася помилка: ', error);\r\n            });\r\n    },\r\n\r\n    // Функція для зміни паролю користувача\r\n    changeUserPassword: (token, oldPassword, newPassword) => {\r\n        const config = {\r\n            headers: { 'authtoken': token },\r\n        };\r\n        const data = {\r\n            old_password: oldPassword,\r\n            new_password: newPassword\r\n        };\r\n        return axios.post(`${BASE_URL}/api/v1/users/change_password`, data, config)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => {\r\n                console.error('Під час зміни паролю сталася помилка: ', error);\r\n            });\r\n    },\r\n\r\n\r\n    // Тут можна додати інші функції для різних API запитів\r\n};\r\n\r\nexport default apiService;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}