{"ast":null,"code":"//import messages from \"@/utils/messages\";\nimport { ref } from \"vue\";\nimport useVuelidate from '@vuelidate/core';\nimport { required, minLength } from \"@vuelidate/validators\";\nimport apiService from '@/services/apiService';\nimport M from \"materialize-css\";\n// import { useRouter } from \"vue-router\";\n\n// export default {\n//   name: 'ProfilePage',\n//   setup () {\n//\n//     const name = ref('');\n//     const password = ref('');\n//     const newPassword = ref('');\n//\n//     //const router = useRouter();\n//     const v$ = useVuelidate();\n//\n//     // Відправка форми по зміні імені\n//     const submitUserName = async () => {\n//       console.log(v$.value.$invalid)\n//       if (v$.value.$invalid) {\n//         v$.value.$touch();\n//         console.log(\"click to submitUserName\");\n//         return;\n//       }\n//       const formDataUserName = {\n//         name: name.value\n//       };\n//       console.log(formDataUserName);\n//     }\n//\n//     // Відправка форми по зміні паролю\n//     const submitUserPassword = async () => {\n//\n//       console.log(v$.value.$invalid);\n//       console.log(v$.value.$invalid);\n//       console.log(v$.value.$touch());\n//       if (v$.value.$invalid) {\n//         v$.value.$touch();\n//         console.log(\"click to submitUserPassword\");\n//         return;\n//       }\n//       const token = localStorage.getItem('token');\n//       if (!token) {\n//         console.log(\"Токен не знайдений. Перенаправлення на сторінку входу.\");\n//         this.$router.push('/login');\n//         return;\n//       }\n//\n//       const oldPassword = password.value;\n//       const newPass = newPassword.value;\n//\n//       try {\n//         const response = await apiService.changeUserPassword(token, oldPassword, newPass);\n//         M.toast({ html: `Пароль успішно змінено` });\n//         console.log('Пароль успішно змінено:', response);\n//       } catch (error) {\n//         M.toast({ html: `[Помилка]: Пароль змінити не вдалося` });\n//         console.log('Помилка при зміні паролю:', error);\n//       }\n//       // const formDataPassword = {\n//       //   password: password.value,\n//       //   newPassword: newPassword.value\n//       // };\n//       // console.log(formDataPassword);\n//     }\n//     //\n//     // // Реактивний стан для перевірки видимості старого пароля\n//     // const isOldPasswordVisible = ref(false);\n//     //\n//     // const OldPasswordIconClass = ref('fas fa-eye-slash'); // Додано реактивний об'єкт для зміни іконки\n//     //\n//     // // Функція переключення видимості пароля\n//     // const OldTogglePassword = () => {\n//     //   isOldPasswordVisible.value = !isOldPasswordVisible.value;\n//     //   if (isOldPasswordVisible.value) {\n//     //     OldPasswordIconClass.value = 'fas fa-eye';\n//     //   } else {\n//     //     OldPasswordIconClass.value = 'fas fa-eye-slash';\n//     //   }\n//     // }\n//     //\n//     // // Реактивний стан для перевірки видимості нового пароля\n//     // const isNewPasswordVisible = ref(false);\n//     //\n//     // const NewPasswordIconClass = ref('fas fa-eye-slash'); // Додано реактивний об'єкт для зміни іконки\n//     //\n//     // // Функція переключення видимості пароля\n//     // const NewTogglePassword = () => {\n//     //   isNewPasswordVisible.value = !isNewPasswordVisible.value;\n//     //   if (isNewPasswordVisible.value) {\n//     //     NewPasswordIconClass.value = 'fas fa-eye';\n//     //   } else {\n//     //     NewPasswordIconClass.value = 'fas fa-eye-slash';\n//     //   }\n//     // }\n//\n//     return {\n//       v$,\n//       submitUserName,\n//       submitUserPassword,\n//       // OldTogglePassword,\n//       // NewTogglePassword,\n//       // isOldPasswordVisible,\n//       // isNewPasswordVisible,\n//       // OldPasswordIconClass,\n//       // NewPasswordIconClass,\n//       name,\n//       password,\n//       newPassword,\n//     }\n//   },\n//   validations () {\n//     return {\n//       // name: { required },\n//       // password: { required },\n//       // newPassword: { required, minLength: minLength(6) }\n//       nameForm: {\n//         name: { required }\n//       },\n//       passwordForm: {\n//         password: { required },\n//         newPassword: { required, minLength: minLength(6) }\n//       }\n//     }\n//   },\n//   methods: {\n//     //Виводимо ключ get запитом у url шоб вивнести повідомлення logout на екран на сторінці UserLogin\n//     // logout() {\n//     //   this.$router.push('/login?message=logout')\n//     // }\n//     async logout() {\n//       const token = localStorage.getItem('token');\n//       console.log(\"remove \" + token);\n//       if (token) {\n//         await apiService.logoutUser(token);\n//         localStorage.removeItem('token');  // Видаляємо токен з localStorage\n//         this.$router.push('/login?message=logout');\n//       } else {\n//         console.log(\"Токен не знайдений. Перенаправлення на сторінку входу.\");\n//         this.$router.push('/login');\n//       }\n//     }\n//   },\n// }\nexport default {\n  name: \"ProfilePage\",\n  setup() {\n    const name = ref(\"\");\n    const oldPassword = ref(\"\");\n    const newPassword = ref(\"\");\n    const vName = useVuelidate({\n      name: {\n        required\n      }\n    });\n    const vPassword = useVuelidate({\n      oldPassword: {\n        required\n      },\n      newPassword: {\n        required,\n        newPasswordMinLength: minLength(6)\n      }\n    });\n\n    // Відправка форми по зміні імені\n    const submitUserName = async () => {\n      console.log(vName.value.$invalid);\n      if (vName.value.$invalid) {\n        vName.value.$touch();\n        console.log(\"click to submitUserName\");\n        return;\n      }\n      const formDataUserName = {\n        name: name.value\n      };\n      console.log(formDataUserName);\n    };\n\n    // Відправка форми по зміні паролю\n    const submitUserPassword = async () => {\n      console.log(vPassword.value.$invalid);\n      if (vPassword.value.$invalid) {\n        vPassword.value.$touch();\n        console.log(\"click to submitUserPassword\");\n        return;\n      }\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        console.log(\"Токен не знайдений. Перенаправлення на сторінку входу.\");\n        // Вставте код для перенаправлення на сторінку входу тут\n        return;\n      }\n      try {\n        const response = await apiService.changeUserPassword(token, oldPassword.value, newPassword.value);\n        M.toast({\n          html: \"Пароль успішно змінено\"\n        });\n        console.log(\"Пароль успішно змінено:\", response);\n      } catch (error) {\n        M.toast({\n          html: \"[Помилка]: Пароль змінити не вдалося\"\n        });\n        console.log(\"Помилка при зміні паролю:\", error);\n      }\n    };\n    return {\n      vName,\n      vPassword,\n      submitUserName,\n      submitUserPassword,\n      name,\n      oldPassword,\n      newPassword\n    };\n  }\n};","map":{"version":3,"names":["ref","useVuelidate","required","minLength","apiService","M","name","setup","oldPassword","newPassword","vName","vPassword","newPasswordMinLength","submitUserName","console","log","value","$invalid","$touch","formDataUserName","submitUserPassword","token","localStorage","getItem","response","changeUserPassword","toast","html","error"],"sources":["C:\\Users\\Denys\\WebstormProjects\\losev-formulas-client\\src\\views\\UserProfile.vue"],"sourcesContent":["<template>\r\n  <div class=\"page_title\">\r\n    <p>\r\n      Мій профіль\r\n    </p>\r\n  </div>\r\n  <div class=\"profile-content\">\r\n<!--    Форма для зміни імені-->\r\n    <form class=\"form name-update-form\" @submit.prevent=\"submitUserName\">\r\n      <div class=\"input-field my_profile_input\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            v-model.trim=\"name\"\r\n            :class=\"{\r\n              invalid: vName.$dirty && vName.$invalid,\r\n            validate: vName.$dirty && !vName.$invalid\r\n            }\"\r\n        >\r\n        <label for=\"name\">Ім'я</label>\r\n        <small\r\n            class=\"helper-text invalid\"\r\n            v-if=\"vName.$dirty && vName.required.$invalid\"\r\n        >Введіть ваше ім'я</small>\r\n      </div>\r\n      <button class=\"name-edit\" type=\"submit\">\r\n        <img src=\"@/assets/icons/edit-button-1.png\" alt=\"Edit Button\">\r\n        <span class=\"edit-link\">Змінити ім’я</span>\r\n      </button>\r\n    </form>\r\n<!--    Форма для зміни паролю-->\r\n    <form class=\"form password-update-form\" @submit.prevent=\"submitUserPassword\">\r\n      <div class=\"input-field my_profile_input\">\r\n        <input\r\n            id=\"old-password\"\r\n            :type=\"isOldPasswordVisible ? 'text' : 'password'\"\r\n            v-model.trim=\"oldPassword\"\r\n            :class=\"{\r\n              invalid: vPassword.$dirty && vPassword.required,\r\n              validate: vPassword.$dirty && !vPassword.required\r\n            }\"\r\n        >\r\n        <label for=\"old-password\">Старий пароль</label>\r\n        <small\r\n            class=\"helper-text invalid\"\r\n            v-if=\"vPassword.$dirty && vPassword.required\"\r\n        >Введіть старий пароль</small>\r\n        <i class=\"toggle-password user-page-password\" :class=\"OldPasswordIconClass\" @click=\"OldTogglePassword\"></i>\r\n      </div>\r\n\r\n      <div class=\"input-field my_profile_input\">\r\n        <input\r\n            id=\"new-password\"\r\n            :type=\"isNewPasswordVisible ? 'text' : 'password'\"\r\n            v-model.trim=\"newPassword\"\r\n            :class=\"{\r\n              invalid: vPassword.$dirty && vPassword.newPasswordRequired,\r\n              validate: vPassword.$dirty && !vPassword.newPasswordMinLength\r\n            }\"\r\n        >\r\n        <label for=\"new-password\">Новий пароль</label>\r\n        <small\r\n            class=\"helper-text invalid\"\r\n            v-if=\"vPassword.$dirty && vPassword.newPasswordRequired\"\r\n        >Введіть новий пароль</small>\r\n        <small\r\n            class=\"helper-text invalid\"\r\n            v-else-if=\"vPassword.$dirty && !vPassword.newPasswordMinLength\"\r\n        >Новий пароль повинен бути {{ vPassword.newPasswordMinLengthMin }} символів. Зараз він {{passwordForm.newPassword.length}}</small>\r\n        <i class=\"toggle-password user-page-password\" :class=\"NewPasswordIconClass\" @click=\"NewTogglePassword\"></i>\r\n      </div>\r\n\r\n      <button class=\"name-edit\" type=\"submit\">\r\n        <img src=\"@/assets/icons/edit-button-1.png\" alt=\"Edit Button\">\r\n        <span class=\"edit-link\">Змінити пароль</span>\r\n      </button>\r\n    </form>\r\n<!--    Вихід з аккаунту-->\r\n    <div class=\"logout-section\">\r\n      <a href=\"#\" @click.prevent=\"logout\" class=\"logout-link\">\r\n        <img src=\"@/assets/icons/log-out-1.png\" alt=\"Edit Button\">\r\n         <span class=\"edit-link\">Вийти з аккаунту</span>\r\n      </a>\r\n    </div>\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\n//import messages from \"@/utils/messages\";\r\nimport {ref} from \"vue\";\r\nimport useVuelidate from '@vuelidate/core';\r\nimport { required, minLength } from \"@vuelidate/validators\";\r\nimport apiService from '@/services/apiService';\r\nimport M from \"materialize-css\";\r\n// import { useRouter } from \"vue-router\";\r\n\r\n// export default {\r\n//   name: 'ProfilePage',\r\n//   setup () {\r\n//\r\n//     const name = ref('');\r\n//     const password = ref('');\r\n//     const newPassword = ref('');\r\n//\r\n//     //const router = useRouter();\r\n//     const v$ = useVuelidate();\r\n//\r\n//     // Відправка форми по зміні імені\r\n//     const submitUserName = async () => {\r\n//       console.log(v$.value.$invalid)\r\n//       if (v$.value.$invalid) {\r\n//         v$.value.$touch();\r\n//         console.log(\"click to submitUserName\");\r\n//         return;\r\n//       }\r\n//       const formDataUserName = {\r\n//         name: name.value\r\n//       };\r\n//       console.log(formDataUserName);\r\n//     }\r\n//\r\n//     // Відправка форми по зміні паролю\r\n//     const submitUserPassword = async () => {\r\n//\r\n//       console.log(v$.value.$invalid);\r\n//       console.log(v$.value.$invalid);\r\n//       console.log(v$.value.$touch());\r\n//       if (v$.value.$invalid) {\r\n//         v$.value.$touch();\r\n//         console.log(\"click to submitUserPassword\");\r\n//         return;\r\n//       }\r\n//       const token = localStorage.getItem('token');\r\n//       if (!token) {\r\n//         console.log(\"Токен не знайдений. Перенаправлення на сторінку входу.\");\r\n//         this.$router.push('/login');\r\n//         return;\r\n//       }\r\n//\r\n//       const oldPassword = password.value;\r\n//       const newPass = newPassword.value;\r\n//\r\n//       try {\r\n//         const response = await apiService.changeUserPassword(token, oldPassword, newPass);\r\n//         M.toast({ html: `Пароль успішно змінено` });\r\n//         console.log('Пароль успішно змінено:', response);\r\n//       } catch (error) {\r\n//         M.toast({ html: `[Помилка]: Пароль змінити не вдалося` });\r\n//         console.log('Помилка при зміні паролю:', error);\r\n//       }\r\n//       // const formDataPassword = {\r\n//       //   password: password.value,\r\n//       //   newPassword: newPassword.value\r\n//       // };\r\n//       // console.log(formDataPassword);\r\n//     }\r\n//     //\r\n//     // // Реактивний стан для перевірки видимості старого пароля\r\n//     // const isOldPasswordVisible = ref(false);\r\n//     //\r\n//     // const OldPasswordIconClass = ref('fas fa-eye-slash'); // Додано реактивний об'єкт для зміни іконки\r\n//     //\r\n//     // // Функція переключення видимості пароля\r\n//     // const OldTogglePassword = () => {\r\n//     //   isOldPasswordVisible.value = !isOldPasswordVisible.value;\r\n//     //   if (isOldPasswordVisible.value) {\r\n//     //     OldPasswordIconClass.value = 'fas fa-eye';\r\n//     //   } else {\r\n//     //     OldPasswordIconClass.value = 'fas fa-eye-slash';\r\n//     //   }\r\n//     // }\r\n//     //\r\n//     // // Реактивний стан для перевірки видимості нового пароля\r\n//     // const isNewPasswordVisible = ref(false);\r\n//     //\r\n//     // const NewPasswordIconClass = ref('fas fa-eye-slash'); // Додано реактивний об'єкт для зміни іконки\r\n//     //\r\n//     // // Функція переключення видимості пароля\r\n//     // const NewTogglePassword = () => {\r\n//     //   isNewPasswordVisible.value = !isNewPasswordVisible.value;\r\n//     //   if (isNewPasswordVisible.value) {\r\n//     //     NewPasswordIconClass.value = 'fas fa-eye';\r\n//     //   } else {\r\n//     //     NewPasswordIconClass.value = 'fas fa-eye-slash';\r\n//     //   }\r\n//     // }\r\n//\r\n//     return {\r\n//       v$,\r\n//       submitUserName,\r\n//       submitUserPassword,\r\n//       // OldTogglePassword,\r\n//       // NewTogglePassword,\r\n//       // isOldPasswordVisible,\r\n//       // isNewPasswordVisible,\r\n//       // OldPasswordIconClass,\r\n//       // NewPasswordIconClass,\r\n//       name,\r\n//       password,\r\n//       newPassword,\r\n//     }\r\n//   },\r\n//   validations () {\r\n//     return {\r\n//       // name: { required },\r\n//       // password: { required },\r\n//       // newPassword: { required, minLength: minLength(6) }\r\n//       nameForm: {\r\n//         name: { required }\r\n//       },\r\n//       passwordForm: {\r\n//         password: { required },\r\n//         newPassword: { required, minLength: minLength(6) }\r\n//       }\r\n//     }\r\n//   },\r\n//   methods: {\r\n//     //Виводимо ключ get запитом у url шоб вивнести повідомлення logout на екран на сторінці UserLogin\r\n//     // logout() {\r\n//     //   this.$router.push('/login?message=logout')\r\n//     // }\r\n//     async logout() {\r\n//       const token = localStorage.getItem('token');\r\n//       console.log(\"remove \" + token);\r\n//       if (token) {\r\n//         await apiService.logoutUser(token);\r\n//         localStorage.removeItem('token');  // Видаляємо токен з localStorage\r\n//         this.$router.push('/login?message=logout');\r\n//       } else {\r\n//         console.log(\"Токен не знайдений. Перенаправлення на сторінку входу.\");\r\n//         this.$router.push('/login');\r\n//       }\r\n//     }\r\n//   },\r\n// }\r\nexport default {\r\n  name: \"ProfilePage\",\r\n  setup() {\r\n    const name = ref(\"\");\r\n    const oldPassword = ref(\"\");\r\n    const newPassword = ref(\"\");\r\n    const vName = useVuelidate({ name: { required } });\r\n    const vPassword = useVuelidate({\r\n      oldPassword: { required },\r\n      newPassword: { required, newPasswordMinLength: minLength(6) }\r\n    });\r\n\r\n    // Відправка форми по зміні імені\r\n    const submitUserName = async () => {\r\n      console.log(vName.value.$invalid);\r\n      if (vName.value.$invalid) {\r\n        vName.value.$touch();\r\n        console.log(\"click to submitUserName\");\r\n        return;\r\n      }\r\n      const formDataUserName = {\r\n        name: name.value\r\n      };\r\n      console.log(formDataUserName);\r\n    };\r\n\r\n    // Відправка форми по зміні паролю\r\n    const submitUserPassword = async () => {\r\n      console.log(vPassword.value.$invalid);\r\n      if (vPassword.value.$invalid) {\r\n        vPassword.value.$touch();\r\n        console.log(\"click to submitUserPassword\");\r\n        return;\r\n      }\r\n\r\n      const token = localStorage.getItem(\"token\");\r\n      if (!token) {\r\n        console.log(\"Токен не знайдений. Перенаправлення на сторінку входу.\");\r\n        // Вставте код для перенаправлення на сторінку входу тут\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await apiService.changeUserPassword(\r\n            token,\r\n            oldPassword.value,\r\n            newPassword.value\r\n        );\r\n        M.toast({ html: \"Пароль успішно змінено\" });\r\n        console.log(\"Пароль успішно змінено:\", response);\r\n      } catch (error) {\r\n        M.toast({ html: \"[Помилка]: Пароль змінити не вдалося\" });\r\n        console.log(\"Помилка при зміні паролю:\", error);\r\n      }\r\n    };\r\n\r\n    return {\r\n      vName,\r\n      vPassword,\r\n      submitUserName,\r\n      submitUserPassword,\r\n      name,\r\n      oldPassword,\r\n      newPassword\r\n    };\r\n  }\r\n};\r\n</script>"],"mappings":"AAyFA;AACA,SAAQA,GAAG,QAAO,KAAK;AACvB,OAAOC,YAAW,MAAO,iBAAiB;AAC1C,SAASC,QAAQ,EAAEC,SAAQ,QAAS,uBAAuB;AAC3D,OAAOC,UAAS,MAAO,uBAAuB;AAC9C,OAAOC,CAAA,MAAO,iBAAieAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,KAAKA,CAAA,EAAG;IACN,MAAMD,IAAG,GAAIN,GAAG,CAAC,EAAE,CAAC;IACpB,MAAMQ,WAAU,GAAIR,GAAG,CAAC,EAAE,CAAC;IAC3B,MAAMS,WAAU,GAAIT,GAAG,CAAC,EAAE,CAAC;IAC3B,MAAMU,KAAI,GAAIT,YAAY,CAAC;MAAEK,IAAI,EAAE;QAAEJ;MAAS;IAAE,CAAC,CAAC;IAClD,MAAMS,SAAQ,GAAIV,YAAY,CAAC;MAC7BO,WAAW,EAAE;QAAEN;MAAS,CAAC;MACzBO,WAAW,EAAE;QAAEP,QAAQ;QAAEU,oBAAoB,EAAET,SAAS,CAAC,CAAC;MAAE;IAC9D,CAAC,CAAC;;IAEF;IACA,MAAMU,cAAa,GAAI,MAAAA,CAAA,KAAY;MACjCC,OAAO,CAACC,GAAG,CAACL,KAAK,CAACM,KAAK,CAACC,QAAQ,CAAC;MACjC,IAAIP,KAAK,CAACM,KAAK,CAACC,QAAQ,EAAE;QACxBP,KAAK,CAACM,KAAK,CAACE,MAAM,CAAC,CAAC;QACpBJ,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;QACtC;MACF;MACA,MAAMI,gBAAe,GAAI;QACvBb,IAAI,EAAEA,IAAI,CAACU;MACb,CAAC;MACDF,OAAO,CAACC,GAAG,CAACI,gBAAgB,CAAC;IAC/B,CAAC;;IAED;IACA,MAAMC,kBAAiB,GAAI,MAAAA,CAAA,KAAY;MACrCN,OAAO,CAACC,GAAG,CAACJ,SAAS,CAACK,KAAK,CAACC,QAAQ,CAAC;MACrC,IAAIN,SAAS,CAACK,KAAK,CAACC,QAAQ,EAAE;QAC5BN,SAAS,CAACK,KAAK,CAACE,MAAM,CAAC,CAAC;QACxBJ,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;QAC1C;MACF;MAEA,MAAMM,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAI,CAACF,KAAK,EAAE;QACVP,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;QACrE;QACA;MACF;MAEA,IAAI;QACF,MAAMS,QAAO,GAAI,MAAMpB,UAAU,CAACqB,kBAAkB,CAChDJ,KAAK,EACLb,WAAW,CAACQ,KAAK,EACjBP,WAAW,CAACO,KAChB,CAAC;QACDX,CAAC,CAACqB,KAAK,CAAC;UAAEC,IAAI,EAAE;QAAyB,CAAC,CAAC;QAC3Cb,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAES,QAAQ,CAAC;MAClD,EAAE,OAAOI,KAAK,EAAE;QACdvB,CAAC,CAACqB,KAAK,CAAC;UAAEC,IAAI,EAAE;QAAuC,CAAC,CAAC;QACzDb,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEa,KAAK,CAAC;MACjD;IACF,CAAC;IAED,OAAO;MACLlB,KAAK;MACLC,SAAS;MACTE,cAAc;MACdO,kBAAkB;MAClBd,IAAI;MACJE,WAAW;MACXC;IACF,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}