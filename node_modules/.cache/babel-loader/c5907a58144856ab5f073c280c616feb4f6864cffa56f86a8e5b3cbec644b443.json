{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref } from 'vue';\nimport { inject } from 'vue';\nimport useVuelidate from '@vuelidate/core';\nimport { required, email, minLength } from '@vuelidate/validators';\nimport { useRouter } from \"vue-router\";\nimport apiService from '@/services/apiService';\nimport M from 'materialize-css';\nexport default {\n  name: 'RegisterPage',\n  data() {\n    return {\n      backgroundClass: null,\n      agree: false\n    };\n  },\n  setup() {\n    const email = ref('');\n    const password = ref('');\n    const name = ref(''); // Реактивний стан для імені користувача\n\n    const router = useRouter(); // Переміщено сюди з submitHandler\n    const v$ = useVuelidate(); // Визначено тут для спрощення\n    const submitHandler = async () => {\n      if (v$.value.$invalid) {\n        v$.value.$touch();\n        console.log(\"click to submitHandler\");\n        return;\n      }\n      const formData = {\n        email: email.value,\n        password: password.value,\n        name: name.value // Додайте ім'я користувача в дані форми\n      };\n\n      console.log(formData);\n      // router.push('/');\n      // const response = await apiService.registerUser(formData.email, formData.password, formData.name);\n      //\n      // if (response.data.success) {\n      //   router.push('/'); // Перенаправляємо користувача на головну сторінку після успішної реєстрації\n      // } else {\n      //   console.log(\"Реєстрація не вдалася\");\n      // }\n      try {\n        const response = await apiService.registerUser(email.value, password.value, name.value);\n\n        // Перевіряємо, чи є реєстрація успішною\n        if (response.data && response.data.id) {\n          // Зберігаємо токен в локальному сховищі, якщо необхідно\n          if (response.data.token) {\n            localStorage.setItem('token', response.data.token);\n          }\n          // Перенаправляємо на головну сторінку\n          router.push('/');\n        } else {\n          M.toast({\n            html: `Реєстрація не вдалася`\n          });\n        }\n      } catch (error) {\n        if (error.response && error.response.status === 422) {\n          // Перевіряємо, чи є помилка з електронною поштою\n          if (error.response.data.errors.email) {\n            // використовуємо $error для виведення помилки\n            M.toast({\n              html: `[Помилка]: Електронна пошта вже використовується`\n            });\n          } else {\n            M.toast({\n              html: `[Помилка]: Реєстрація не вдалася`\n            });\n          }\n        } else {\n          M.toast({\n            html: `[Помилка]: Помилка під час реєстрації:`,\n            error\n          });\n        }\n      }\n    };\n    // Реактивний стан для перевірки видимості пароля\n    const isPasswordVisible = ref(false);\n    const passwordIconClass = ref('fas fa-eye-slash'); // Додано реактивний об'єкт для зміни іконки\n\n    // Функція переключення видимості пароля\n    const togglePassword = () => {\n      isPasswordVisible.value = !isPasswordVisible.value;\n      if (isPasswordVisible.value) {\n        passwordIconClass.value = 'fas fa-eye';\n      } else {\n        passwordIconClass.value = 'fas fa-eye-slash';\n      }\n    };\n    return {\n      v$,\n      submitHandler,\n      // Повертаємо функцію з setup\n      isPasswordVisible,\n      togglePassword,\n      passwordIconClass,\n      email,\n      password,\n      name\n    };\n  },\n  validations() {\n    return {\n      email: {\n        required,\n        email\n      },\n      password: {\n        required,\n        minLength: minLength(6)\n      },\n      name: {\n        required\n      },\n      agree: {\n        checked: value => value\n      }\n    };\n  },\n  created() {\n    this.backgroundClass = inject('backgroundClass');\n  }\n};","map":{"version":3,"names":["ref","inject","useVuelidate","required","email","minLength","useRouter","apiService","M","name","data","backgroundClass","agree","setup","password","router","v$","submitHandler","value","$invalid","$touch","console","log","formData","response","registerUser","id","token","localStorage","setItem","push","toast","html","error","status","errors","isPasswordVisible","passwordIconClass","togglePassword","validations","checked","created"],"sources":["C:\\Users\\Denys\\WebstormProjects\\losev-formulas-client\\src\\views\\UserRegister.vue"],"sourcesContent":["<template>\r\n  <div :class=\"backgroundClass\">\r\n    <div class=\"empty-layout\">\r\n      <form class=\"card auth-card\" @submit.prevent=\"submitHandler\">\r\n      <div class=\"card-content\">\r\n        <span class=\"card-title\">Реєстрація Losev Formulas</span>\r\n        <div class=\"input-field\">\r\n          <input\r\n              id=\"email\"\r\n              type=\"text\"\r\n              v-model.trim=\"email\"\r\n              :class=\"{\r\n                  invalid: (v$.email.$dirty && v$.email.required.$invalid) || (v$.email.$dirty && v$.email.email.$invalid),\r\n                  validate: v$.email.$dirty && !v$.email.required.$invalid && !v$.email.email.$invalid\r\n                }\"\r\n          >\r\n          <label for=\"email\">E-mail</label>\r\n          <small\r\n              class=\"helper-text invalid\"\r\n              v-if=\"v$.email.$dirty && v$.email.required.$invalid\"\r\n          >Поле E-mail не може бути пустим</small>\r\n          <small\r\n              class=\"helper-text invalid\"\r\n              v-else-if=\"v$.email.$dirty && v$.email.email.$invalid\"\r\n          >Введіть коректний E-mail</small>\r\n        </div>\r\n        <div class=\"input-field\">\r\n          <input\r\n              id=\"password\"\r\n              :type=\"isPasswordVisible ? 'text' : 'password'\"\r\n              v-model.trim=\"password\"\r\n              :class=\"{\r\n                  invalid: (v$.password.$dirty && v$.password.required.$invalid) || (v$.password.$dirty && !v$.password.minLength.$invalid),\r\n                  validate: v$.password.$dirty && !v$.password.required.$invalid && !v$.password.minLength.$invalid\r\n                }\"\r\n          >\r\n          <label for=\"password\">Пароль</label>\r\n          <small\r\n              class=\"helper-text invalid\"\r\n              v-if=\"v$.password.$dirty && v$.password.required.$invalid\"\r\n          >Введіть пароль</small>\r\n          <small\r\n              class=\"helper-text invalid\"\r\n              v-else-if=\"v$.password.$dirty && v$.password.minLength.$invalid\"\r\n          >Пароль повинен бути {{ v$.password.minLength.$params.min }} символів. Зараз він {{password.length}}</small>\r\n          <i class=\"toggle-password\" :class=\"passwordIconClass\" @click=\"togglePassword\"></i>\r\n        </div>\r\n        <div class=\"input-field\">\r\n          <input\r\n              id=\"name\"\r\n              type=\"text\"\r\n              v-model.trim=\"name\"\r\n              :class=\"{\r\n                  invalid: v$.name.$dirty && v$.name.required.$invalid,\r\n                  validate: v$.name.$dirty && !v$.name.required.$invalid\r\n                }\"\r\n          >\r\n          <label for=\"name\">Ваше ім'я</label>\r\n          <small\r\n              class=\"helper-text invalid\"\r\n              v-if=\"v$.name.$dirty && v$.name.required.$invalid\"\r\n          >Введіть ваше ім'я</small>\r\n        </div>\r\n        <p>\r\n          <label>\r\n            <input type=\"checkbox\" v-model=\"agree\" />\r\n            <span>Згода на обробку персональних даних</span>\r\n          </label>\r\n        </p>\r\n      </div>\r\n      <div class=\"card-action\">\r\n        <div class=\"butt_register\">\r\n          <button\r\n              class=\"btn waves-effect waves-light auth-submit\"\r\n              type=\"submit\"\r\n          >\r\n            Зареєструватися\r\n          </button>\r\n        </div>\r\n\r\n        <p class=\"center under_butt_auth\">\r\n          Вже є аккаунт?\r\n          <router-link to=\"/login\">Увійти</router-link>\r\n        </p>\r\n      </div>\r\n    </form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref } from 'vue';\r\nimport { inject } from 'vue';\r\nimport useVuelidate from '@vuelidate/core'\r\nimport { required, email, minLength } from '@vuelidate/validators'\r\nimport { useRouter } from \"vue-router\";\r\nimport apiService from '@/services/apiService';\r\nimport M from 'materialize-css';\r\n\r\nexport default {\r\n  name: 'RegisterPage',\r\n  data () {\r\n    return {\r\n      backgroundClass: null,\r\n      agree: false\r\n    }\r\n  },\r\n  setup () {\r\n    const email = ref('');\r\n    const password = ref('');\r\n    const name = ref(''); // Реактивний стан для імені користувача\r\n\r\n    const router = useRouter(); // Переміщено сюди з submitHandler\r\n    const v$ = useVuelidate(); // Визначено тут для спрощення\r\n    const submitHandler = async () => {\r\n      if (v$.value.$invalid) {\r\n        v$.value.$touch();\r\n        console.log(\"click to submitHandler\")\r\n        return;\r\n      }\r\n\r\n      const formData = {\r\n        email: email.value,\r\n        password: password.value,\r\n        name: name.value // Додайте ім'я користувача в дані форми\r\n      };\r\n      console.log(formData);\r\n      // router.push('/');\r\n      // const response = await apiService.registerUser(formData.email, formData.password, formData.name);\r\n      //\r\n      // if (response.data.success) {\r\n      //   router.push('/'); // Перенаправляємо користувача на головну сторінку після успішної реєстрації\r\n      // } else {\r\n      //   console.log(\"Реєстрація не вдалася\");\r\n      // }\r\n      try {\r\n        const response = await apiService.registerUser(email.value, password.value, name.value);\r\n\r\n        // Перевіряємо, чи є реєстрація успішною\r\n        if (response.data && response.data.id) {\r\n          // Зберігаємо токен в локальному сховищі, якщо необхідно\r\n          if (response.data.token) {\r\n            localStorage.setItem('token', response.data.token);\r\n          }\r\n          // Перенаправляємо на головну сторінку\r\n          router.push('/');\r\n        } else {\r\n          M.toast({ html: `Реєстрація не вдалася` });\r\n        }\r\n      } catch (error) {\r\n        if (error.response && error.response.status === 422) {\r\n          // Перевіряємо, чи є помилка з електронною поштою\r\n          if (error.response.data.errors.email) {\r\n            // використовуємо $error для виведення помилки\r\n            M.toast({ html: `[Помилка]: Електронна пошта вже використовується` });\r\n          } else {\r\n            M.toast({ html: `[Помилка]: Реєстрація не вдалася` });\r\n          }\r\n        } else {\r\n          M.toast({ html: `[Помилка]: Помилка під час реєстрації:`, error});\r\n        }\r\n      }\r\n    }\r\n    // Реактивний стан для перевірки видимості пароля\r\n    const isPasswordVisible = ref(false);\r\n\r\n    const passwordIconClass = ref('fas fa-eye-slash'); // Додано реактивний об'єкт для зміни іконки\r\n\r\n    // Функція переключення видимості пароля\r\n    const togglePassword = () => {\r\n      isPasswordVisible.value = !isPasswordVisible.value;\r\n      if (isPasswordVisible.value) {\r\n        passwordIconClass.value = 'fas fa-eye';\r\n      } else {\r\n        passwordIconClass.value = 'fas fa-eye-slash';\r\n      }\r\n    }\r\n    return {\r\n      v$,\r\n      submitHandler, // Повертаємо функцію з setup\r\n      isPasswordVisible,\r\n      togglePassword,\r\n      passwordIconClass,\r\n      email,\r\n      password,\r\n      name\r\n    }\r\n  },\r\n  validations () {\r\n    return {\r\n      email: { required, email },\r\n      password: { required, minLength: minLength(6) },\r\n      name: { required },\r\n      agree: { checked: value => value }\r\n    }\r\n  },\r\n  created() {\r\n    this.backgroundClass = inject('backgroundClass');\r\n  },\r\n}\r\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}