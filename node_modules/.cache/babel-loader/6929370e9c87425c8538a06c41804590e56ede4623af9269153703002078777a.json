{"ast":null,"code":"import homeIcon from '@/assets/icons/home-1.png';\nimport allPodcastIcon from '@/assets/icons/all-podcast-1.png';\nimport mypodcastIcon from '@/assets/icons/my-podcast-1.png';\nimport mysavedIcon from '@/assets/icons/my-saved-1.png';\nimport categoriesIcon from '@/assets/icons/categories-1.png';\nimport apiService from '@/services/apiService';\nimport M from \"materialize-css\";\nexport default {\n  data: () => ({\n    // Перевірка токену\n    //const isLoggedIn = localStorage.getItem('token');\n\n    // Визначення доступних посилань\n    // const baseLinks = [\n    //   {title: 'Головна', url: '/', icon: homeIcon},\n    //   {title: 'Всі подкасти', url: '/allpodcast', exact:true, icon: allPodcastIcon},\n    //   isLoggedIn ? {title: 'Мої подкасти', url: '/podcast', exact:true, icon: mypodcastIcon} : null,\n    //   isLoggedIn ? {title: 'Збереження', url: '/saved', exact:true, icon: mysavedIcon} : null,\n    //   {title: 'Категорії', url: '/categories', exact:true, icon: categoriesIcon},\n    // ];\n    //\n    // // Видалити всі значення null (для незалогінених користувачів)\n    // const filteredLinks = baseLinks.filter(Boolean);\n    //\n    // return {\n    //   links: filteredLinks,\n    //   isSmall: false\n    // };\n    isSmall: false,\n    links: [{\n      title: 'Головна',\n      url: '/',\n      icon: homeIcon,\n      isVisible: true\n    }, {\n      title: 'Всі подкасти',\n      url: '/allpodcast',\n      exact: true,\n      icon: allPodcastIcon,\n      isVisible: true\n    }, {\n      title: 'Мої подкасти',\n      url: '/podcast',\n      exact: true,\n      icon: mypodcastIcon,\n      isVisible: false\n    }, {\n      title: 'Збереження',\n      url: '/saved',\n      exact: true,\n      icon: mysavedIcon,\n      isVisible: false\n    }, {\n      title: 'Категорії',\n      url: '/categories',\n      exact: true,\n      icon: categoriesIcon,\n      isVisible: true\n    }]\n  }),\n  async created() {\n    const token = localStorage.getItem('token');\n    if (!token) return;\n    try {\n      const userProfile = await apiService.getUserProfile(token);\n      if (!userProfile.error) {\n        // Користувач залогінений, робимо сторінки \"Мої подкасти\" і \"Збереження\" видимими\n        this.links.find(link => link.title === 'Мої подкасти').isVisible = true;\n        this.links.find(link => link.title === 'Збереження').isVisible = true;\n      } else if (userProfile.error.message === 'You need to login before continue') {\n        // Користувач не залогінений, приховуємо сторінки \"Мої подкасти\" і \"Збереження\"\n        this.links.find(link => link.title === 'Мої подкасти').isVisible = false;\n        this.links.find(link => link.title === 'Збереження').isVisible = false;\n        M.toast({\n          html: `Ви вийшли з аккаунту`\n        });\n      }\n    } catch (error) {\n      console.log('Помилка при отриманні профілю користувача:', error);\n    }\n  },\n  methods: {\n    toggleSize() {\n      this.isSmall = !this.isSmall;\n      //Надіслати подію батькові при перемиканні розміру\n      this.$emit('toggle-size', this.isSmall);\n    }\n  }\n};","map":{"version":3,"names":["homeIcon","allPodcastIcon","mypodcastIcon","mysavedIcon","categoriesIcon","apiService","M","data","isSmall","links","title","url","icon","isVisible","exact","created","token","localStorage","getItem","userProfile","getUserProfile","error","find","link","message","toast","html","console","log","methods","toggleSize","$emit"],"sources":["C:\\Users\\Denys\\WebstormProjects\\losev-formulas-client\\src\\components\\app\\SideBar.vue"],"sourcesContent":["<template>\r\n  <nav class=\"sidebar-menu\" :class=\"{ small: isSmall }\">\r\n    <div class=\"menu-header\">\r\n      <a href=\"#\" @click.prevent=\"toggleSize\">\r\n        <img class=\"menu-icon\" src=\"@/assets/icons/menu-1.png\" alt=\"Menu icon\">\r\n        <span v-show=\"!isSmall\">МЕНЮ</span>\r\n      </a>\r\n    </div>\r\n<!--    Видалив :exact=\"link.exact\" після :to=\"link.url бо матюкався Vue 3\"-->\r\n    <ul class=\"menu-ul\">\r\n      <router-link\r\n          v-for=\"link in links\"\r\n          :key=\"link.url\"\r\n          :to=\"link.url\"\r\n\r\n          active-class=\"active\"\r\n          custom\r\n          v-slot=\"{ navigate, isActive }\"\r\n      >\r\n        <li\r\n            class=\"menu-item\"\r\n            :class=\"{ 'active': isActive }\"\r\n            @click=\"navigate\"\r\n            v-if=\"link.isVisible\"\r\n        >\r\n          <a>\r\n            <img class=\"menu-icon\" :src=\"link.icon\" :alt=\"`${link.title} icon`\">\r\n            <span v-show=\"!isSmall\">{{ link.title }}</span>\r\n          </a>\r\n        </li>\r\n      </router-link>\r\n    </ul>\r\n  </nav>\r\n</template>\r\n<script>\r\nimport homeIcon from '@/assets/icons/home-1.png';\r\nimport allPodcastIcon from '@/assets/icons/all-podcast-1.png';\r\nimport mypodcastIcon from '@/assets/icons/my-podcast-1.png';\r\nimport mysavedIcon from '@/assets/icons/my-saved-1.png';\r\nimport categoriesIcon from '@/assets/icons/categories-1.png';\r\nimport apiService from '@/services/apiService';\r\nimport M from \"materialize-css\";\r\n\r\nexport default {\r\n  data: () => ({\r\n    // Перевірка токену\r\n    //const isLoggedIn = localStorage.getItem('token');\r\n\r\n    // Визначення доступних посилань\r\n    // const baseLinks = [\r\n    //   {title: 'Головна', url: '/', icon: homeIcon},\r\n    //   {title: 'Всі подкасти', url: '/allpodcast', exact:true, icon: allPodcastIcon},\r\n    //   isLoggedIn ? {title: 'Мої подкасти', url: '/podcast', exact:true, icon: mypodcastIcon} : null,\r\n    //   isLoggedIn ? {title: 'Збереження', url: '/saved', exact:true, icon: mysavedIcon} : null,\r\n    //   {title: 'Категорії', url: '/categories', exact:true, icon: categoriesIcon},\r\n    // ];\r\n    //\r\n    // // Видалити всі значення null (для незалогінених користувачів)\r\n    // const filteredLinks = baseLinks.filter(Boolean);\r\n    //\r\n    // return {\r\n    //   links: filteredLinks,\r\n    //   isSmall: false\r\n    // };\r\n    isSmall: false,\r\n    links: [\r\n      { title: 'Головна', url: '/', icon: homeIcon, isVisible: true },\r\n      { title: 'Всі подкасти', url: '/allpodcast', exact: true, icon: allPodcastIcon, isVisible: true },\r\n      { title: 'Мої подкасти', url: '/podcast', exact: true, icon: mypodcastIcon, isVisible: false },\r\n      { title: 'Збереження', url: '/saved', exact: true, icon: mysavedIcon, isVisible: false },\r\n      { title: 'Категорії', url: '/categories', exact: true, icon: categoriesIcon, isVisible: true },\r\n    ],\r\n\r\n  }),\r\n  async created() {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) return;\r\n\r\n    try {\r\n      const userProfile = await apiService.getUserProfile(token);\r\n      if (!userProfile.error) {\r\n        // Користувач залогінений, робимо сторінки \"Мої подкасти\" і \"Збереження\" видимими\r\n        this.links.find(link => link.title === 'Мої подкасти').isVisible = true;\r\n        this.links.find(link => link.title === 'Збереження').isVisible = true;\r\n      } else if (userProfile.error.message === 'You need to login before continue') {\r\n        // Користувач не залогінений, приховуємо сторінки \"Мої подкасти\" і \"Збереження\"\r\n        this.links.find(link => link.title === 'Мої подкасти').isVisible = false;\r\n        this.links.find(link => link.title === 'Збереження').isVisible = false;\r\n        M.toast({ html: `Ви вийшли з аккаунту` });\r\n      }\r\n    } catch (error) {\r\n      console.log('Помилка при отриманні профілю користувача:', error);\r\n    }\r\n  },\r\n  methods: {\r\n    toggleSize() {\r\n      this.isSmall = !this.isSmall;\r\n      //Надіслати подію батькові при перемиканні розміру\r\n      this.$emit('toggle-size', this.isSmall);\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.sidebar-menu.small {\r\n  width: 70px;\r\n}\r\n.menu-ul {\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-wrap: nowrap;\r\n}\r\n.menu-header a {\r\n  padding: 15px 0 25px;\r\n  display: flex;\r\n  align-items: center;\r\n  align-content: center;\r\n  flex-wrap: nowrap;\r\n  flex-direction: row;\r\n}\r\n.menu-header a span {\r\n  line-height: 0;\r\n}\r\n</style>"],"mappings":"AAmCA,OAAOA,QAAO,MAAO,2BAA2B;AAChD,OAAOC,cAAa,MAAO,kCAAkC;AAC7D,OAAOC,aAAY,MAAO,iCAAiC;AAC3D,OAAOC,WAAU,MAAO,+BAA+B;AACvD,OAAOC,cAAa,MAAO,iCAAiC;AAC5D,OAAOC,UAAS,MAAO,uBAAuB;AAC9C,OAAOC,CAAA,MAAO,iBAAiB;AAE/B,eAAe;EACbC,IAAI,EAAEA,CAAA,MAAO;IACX;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAC,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE,CACL;MAAEC,KAAK,EAAE,SAAS;MAAEC,GAAG,EAAE,GAAG;MAAEC,IAAI,EAAEZ,QAAQ;MAAEa,SAAS,EAAE;IAAK,CAAC,EAC/D;MAAEH,KAAK,EAAE,cAAc;MAAEC,GAAG,EAAE,aAAa;MAAEG,KAAK,EAAE,IAAI;MAAEF,IAAI,EAAEX,cAAc;MAAEY,SAAS,EAAE;IAAK,CAAC,EACjG;MAAEH,KAAK,EAAE,cAAc;MAAEC,GAAG,EAAE,UAAU;MAAEG,KAAK,EAAE,IAAI;MAAEF,IAAI,EAAEV,aAAa;MAAEW,SAAS,EAAE;IAAM,CAAC,EAC9F;MAAEH,KAAK,EAAE,YAAY;MAAEC,GAAG,EAAE,QAAQ;MAAEG,KAAK,EAAE,IAAI;MAAEF,IAAI,EAAET,WAAW;MAAEU,SAAS,EAAE;IAAM,CAAC,EACxF;MAAEH,KAAK,EAAE,WAAW;MAAEC,GAAG,EAAE,aAAa;MAAEG,KAAK,EAAE,IAAI;MAAEF,IAAI,EAAER,cAAc;MAAES,SAAS,EAAE;IAAK,CAAC;EAGlG,CAAC,CAAC;EACF,MAAME,OAAOA,CAAA,EAAG;IACd,MAAMC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACF,KAAK,EAAE;IAEZ,IAAI;MACF,MAAMG,WAAU,GAAI,MAAMd,UAAU,CAACe,cAAc,CAACJ,KAAK,CAAC;MAC1D,IAAI,CAACG,WAAW,CAACE,KAAK,EAAE;QACtB;QACA,IAAI,CAACZ,KAAK,CAACa,IAAI,CAACC,IAAG,IAAKA,IAAI,CAACb,KAAI,KAAM,cAAc,CAAC,CAACG,SAAQ,GAAI,IAAI;QACvE,IAAI,CAACJ,KAAK,CAACa,IAAI,CAACC,IAAG,IAAKA,IAAI,CAACb,KAAI,KAAM,YAAY,CAAC,CAACG,SAAQ,GAAI,IAAI;MACvE,OAAO,IAAIM,WAAW,CAACE,KAAK,CAACG,OAAM,KAAM,mCAAmC,EAAE;QAC5E;QACA,IAAI,CAACf,KAAK,CAACa,IAAI,CAACC,IAAG,IAAKA,IAAI,CAACb,KAAI,KAAM,cAAc,CAAC,CAACG,SAAQ,GAAI,KAAK;QACxE,IAAI,CAACJ,KAAK,CAACa,IAAI,CAACC,IAAG,IAAKA,IAAI,CAACb,KAAI,KAAM,YAAY,CAAC,CAACG,SAAQ,GAAI,KAAK;QACtEP,CAAC,CAACmB,KAAK,CAAC;UAAEC,IAAI,EAAG;QAAsB,CAAC,CAAC;MAC3C;IACF,EAAE,OAAOL,KAAK,EAAE;MACdM,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAEP,KAAK,CAAC;IAClE;EACF,CAAC;EACDQ,OAAO,EAAE;IACPC,UAAUA,CAAA,EAAG;MACX,IAAI,CAACtB,OAAM,GAAI,CAAC,IAAI,CAACA,OAAO;MAC5B;MACA,IAAI,CAACuB,KAAK,CAAC,aAAa,EAAE,IAAI,CAACvB,OAAO,CAAC;IACzC;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}